// testing the test framework //
// so meta                    //

import ( "std.um"; "toast.um" )

fn alwaysPass(T: ^toast::Context) {
	if !T.assert.isTrue(1 + 2 == 3, "math doesn't work") { return }
}

fn alwaysFail(T: ^toast::Context) {
	if !T.assert.isTrue(false, "logic works") { return }
}

fn failOnNonExistantFile(T: ^toast::Context) {
	f, e := std::fopen("AJHSKJHDSKhdksjhdsjhsd.txt", "rb")

	msg := "couldn't open non-existant file (as it's supposed to do)"
	if !T.assert.isOk(e, msg) { return }
}

fn passOnExistantFile(T: ^toast::Context) {
	f, e := std::fopen("toast.um", "rb")

	if !T.assert.isOk(e, "this should NOT HAPPEN") { return }

	std::fclose(f)
}

fn main() {
	T := toast::newContext()
	T.fmtWithColor = true
	T.registerTests({
		"always pass": alwaysPass,
		"always fail": alwaysFail,
		"fake file": failOnNonExistantFile,
		"real file": passOnExistantFile
	})
	T.run()
}
